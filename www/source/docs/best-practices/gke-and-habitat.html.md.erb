---
title: "Google Kubernetes Engine (GKE)"
description:
---

# <a name="gke-and-habitat" id="gke-and-habitat" data-magellan-target="gke-and-habitat">Google Kubernetes Engine (GKE)</a>

[Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine/) is a fully managed Kubernetes service running on the Google Cloud Platform. It supports running Chef Habitat
packages using the [Chef Habitat Kubernetes Operator](https://github.com/habitat-sh/habitat-operator).


## Google Container Registry (GCR)

[Google Container Registry](https://cloud.google.com/container-registry/) is a private Docker repository that
works with popular continuous delivery systems. It runs on GCP to provide consistent uptime on an infrastructure
protected by Google's security. The registry service hosts your private images in Cloud Storage under your GCP project.

Before you can push or pull images, you must configure Docker to use the gcloud command-line tool to authenticate
requests to Container Registry. To do so, run the following command (you are only required to do this once):

```bash
$ gcloud auth configure-docker
```

Further access control information is [available here](https://cloud.google.com/container-registry/docs/access-control).

After a successful Chef Habitat package build, images can be pushed to the Container Registry using the registry URI. The format of this
follows: `[HOSTNAME]/[PROJECT-ID]/[IMAGE]:[TAG]`, more details at [this link](https://cloud.google.com/container-registry/docs/pushing-and-pulling):

```bash
$ hab pkg export kubernetes ./results/habskp-hab-gcr-demo-0.1.0-20180710145742-x86_64-linux.hart
$ docker tag habskp/hab-gcr-demo:latest eu.gcr.io/user-project/hab-gcr-demo:latest
$ docker push eu.gcr.io/user-project/hab-gcr-demo:latest
```

## Google Kubernetes Engine (GKE)

After images have been pushed to the Container Registry, they may be deployed to GKE in the same project without any further configuration changes. To
make images available publicly or across projects, see [this documentation](https://cloud.google.com/container-registry/docs/access-control).

Below is a sample manifest that deploys the Chef Habitat managed container to GKE, pulling the image uploaded in the previous section
from the Container Registry:

```
kind: Habitat
metadata:
  name: hab-gcr-demo
customVersion: v1beta2
spec:
  v1beta2:
    image: eu.gcr.io/user-project/hab-gcr-demo:latest
    count: 1
    service:
      name: hab-gcr-demo
      topology: standalone
---
apiVersion: v1
kind: Service
metadata:
  name: hab-gcr-demo-lb
spec:
  type: LoadBalancer
  ports:
  - name: web
    port: 80
    targetPort: 8080
  selector:
    habitat-name: hab-gcr-demo
```

This also creates a Kubernetes load balancer service to expose port `8080` from the container to a public IP address on port `80`.

This example assumes [Chef Habitat Operator](https://github.com/habitat-sh/habitat-operator) is running on the Kubernetes cluster but it
is also possible to deploy using `kubectl` for Chef Habitat packages exported as containers.

## Related Reading

* [Google Kubernetes Engine](https://cloud.google.com/kubernetes-engine/)
* [Google Container Registry](https://cloud.google.com/container-registry/)
