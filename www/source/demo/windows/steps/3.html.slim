section
 h1 Define Dependencies

 p This topic explains your options for dependency customizations and in which scenarios you are most likely to need them.

 h2 Build and runtime dependencies

 p Dependencies are broken up into two main types: build dependencies and runtime dependencies. Build dependencies are needed while your package builds and runtime dependencies are those packages needed when your Chef Habitat service is running.

 p You will need to declare the following dependencies for the Contoso University ASP.NET Chef Habitat plan:

 = code(:shell) do
   |
    $pkg_deps=@("core/dsc-core")
    $pkg_build_deps=@("core/nuget")

 p This will allow the <code>nuget.exe</code> command line tool to be available at build time which includes functionality for populating nuget package dependencies. However there is no need for that tool at run time. We will be relying on the <code>core/dsc-core</code> package in our runtime hooks which we will cover in more detail later.

 p If you require additional runtime or buildtime dependencies, you can add them into your plan.ps1 using the <code>$pkg_deps</code> and <code>$pkg_build_deps</code> settings, respectively. For example, if you wanted to implement a custom <code>Invoke-Download</code> callback to pull your application source from a git repository, you would need to add another build time dependency on <code>core/git</code> to your <code>plan.ps1</code>.

 p There is a third type of dependency, transitive dependencies, that do not need to be explicitly declared in your plan file. They are automatically included in the list of files when your package is built. See #{link_to 'Package Contents','/docs/reference/package-contents'} for more information.

 h2 Where are the IIS and .NET Framework dependencies!?

 p There are some dependencies in Windows that present unique challenges when trying to build a fully portable and isolatable package. The .NET framework and services like IIS are good examples of such dependencies. These represent monolithic, single tenant installations that cannot simply be downloaded to a specific place on disk and run in an isolated fashion. So we employ different patterns to deal with each of these.

 h3 .NET Framework

 p If this were a .NET Core application, we could simply declare a dependency on <code>core/dotnet-core</code> which would put <code>dotnet.exe</code> on our path and we just point that to our built binary and we are done. The .NET "full framework" on the other hand wants to be in a very specific place on disk, has a key component called the Gloabal Assembly Cache (note "global") and requires some Windows registry entries to be friendly. We will deal with this by leaving the responsibility of installing the correct version of the .NET framework up to our provisioning or configuration management layer. Our ASP.NET application plan will simply assume the presense of the .NET framework in the environment where it is running. The fact of the matter is that any fully patched version of Windows that Chef Habitat supports will have a v4 .NET CLR installed - so often the requirement of the .NET framework will already be present on a fresh Windows image. However it might be a version or two behind the latest version of the .NET 4 runtime and if your application depends on new features in those versions, then you will need to make sure to have them installed before running your application in Chef Habitat.

 h3 IIS

 p The IIS binaries are actually baked into the Windows OS as a feature. Also, like the .NET framework, all web applications that run on a single node are managed by a single IIS instance. Rather than treating IIS as a traditional Chef Habitat dependency, we will leverage #{link_to 'Powershell DSC (Desired State Configuration)','https://docs.microsoft.com/en-us/powershell/dsc/overview'} to enable and configure IIS to work with our application. This will be handled in our runtime hooks and we will discuss the details there.

 h2 Use the Chef Habitat Builder UI to search for dependencies

 p By going to #{link_to 'the Chef Habitat website',"#{builder_web_url}/#/pkgs/core"}, you can search for packages built by the Chef Habitat team and members of the community, and use them in your own applications and services.

 p Type in the name of your dependency (such as <code>git</code>). You will get a search result list back with available public packages. Any packages with the origin "core" are foundational packages managed and maintained by the #{link_to 'Chef Habitat maintainers','https://github.com/habitat-sh/habitat/blob/master/MAINTAINERS.md'}.

 p Clicking on one of the entries will show you all of the versions of that package that have been uploaded to Builder. By convention, version numbers align with the version of the binary, library, or framework that the package has bundled up. For example, the <code>core/visual-build-tools-2017</code> version 15 package has v15 of the Visual Studio Build Tools binaries and libraries.

 p The Builder UI also provides channel information about the package, as denoted by the <code>stable</code> and <code>unstable</code> labels. Channels function like continuous delivery stages in a pipeline (development, QA, production, etc.). When packages are initially uploaded to Builder, they are placed in the <code>unstable</code> channel, and by default, only <code>stable</code> packages are downloaded and installed in a given container, virtual machine, etc unless otherwise specified through the <code>hab svc load</code> command. By convention, the latest version number with the latest build date will be the stable version of the package.

 p Additionally, the available platform of each package version is included. Builder currently only supports Linux and Windows.

 p After you have decided on a version, click on it to see the #{link_to 'manifest','/docs/reference/package-contents#manifest'}  for the package.

 p All specific information on how that package was built will be contained within the manifest and if it is a core package, the plan for that package will be in the #{link_to 'core-plans','https://github.com/habitat-sh/core-plans'} repo in GitHub.

= link_to 'Next: Define Build Logic For Your App', "/demo/windows/steps/4", class: 'button cta'
